
BUTTON test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000356  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2d  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cd  00000000  00000000  000010d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000829  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c1  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008cc  00000000  00000000  0000299d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003269  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  7a:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuSetPinValue>:

DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;

    if( (Copy_enuPinNum >= 0) && (Copy_enuPinNum < DIO_enuMaxPin) )
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_enuSetPinValue+0x6>
  86:	aa c0       	rjmp	.+340    	; 0x1dc <DIO_enuSetPinValue+0x15a>
    {
        switch(Copy_enuPortNum)
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	81 f1       	breq	.+96     	; 0xec <DIO_enuSetPinValue+0x6a>
  8c:	38 f0       	brcs	.+14     	; 0x9c <DIO_enuSetPinValue+0x1a>
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	09 f4       	brne	.+2      	; 0x94 <DIO_enuSetPinValue+0x12>
  92:	54 c0       	rjmp	.+168    	; 0x13c <DIO_enuSetPinValue+0xba>
  94:	83 30       	cpi	r24, 0x03	; 3
  96:	09 f4       	brne	.+2      	; 0x9a <DIO_enuSetPinValue+0x18>
  98:	79 c0       	rjmp	.+242    	; 0x18c <DIO_enuSetPinValue+0x10a>
  9a:	a2 c0       	rjmp	.+324    	; 0x1e0 <DIO_enuSetPinValue+0x15e>
        {
#if PORT_A_EXIST == EXIST
            case DIO_enuPORTA:
                /* If pin configuration is set to anything other than Output then return InvalidOperation */
                if( GET_BIT(DDRA_REG, Copy_enuPinNum) == DIO_enuHigh )
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	06 2e       	mov	r0, r22
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_enuSetPinValue+0x26>
  a4:	95 95       	asr	r25
  a6:	87 95       	ror	r24
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_enuSetPinValue+0x22>
  ac:	80 ff       	sbrs	r24, 0
  ae:	9a c0       	rjmp	.+308    	; 0x1e4 <DIO_enuSetPinValue+0x162>
                {
                    switch(Copy_enuState)
  b0:	44 23       	and	r20, r20
  b2:	19 f0       	breq	.+6      	; 0xba <DIO_enuSetPinValue+0x38>
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	71 f0       	breq	.+28     	; 0xd4 <DIO_enuSetPinValue+0x52>
  b8:	97 c0       	rjmp	.+302    	; 0x1e8 <DIO_enuSetPinValue+0x166>
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTA_REG, Copy_enuPinNum);
  ba:	2b b3       	in	r18, 0x1b	; 27
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_enuSetPinValue+0x44>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_enuSetPinValue+0x40>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	8b bb       	out	0x1b, r24	; 27
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
  d0:	80 e0       	ldi	r24, 0x00	; 0
                {
                    switch(Copy_enuState)
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTA_REG, Copy_enuPinNum);
                            break;
  d2:	08 95       	ret

                        case DIO_enuHigh:
                            SET_BIT(PORTA_REG, Copy_enuPinNum);
  d4:	2b b3       	in	r18, 0x1b	; 27
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_enuSetPinValue+0x5e>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_enuSetPinValue+0x5a>
  e4:	82 2b       	or	r24, r18
  e6:	8b bb       	out	0x1b, r24	; 27
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
  e8:	80 e0       	ldi	r24, 0x00	; 0
                            CLR_BIT(PORTA_REG, Copy_enuPinNum);
                            break;

                        case DIO_enuHigh:
                            SET_BIT(PORTA_REG, Copy_enuPinNum);
                            break;
  ea:	08 95       	ret
#endif

#if PORT_B_EXIST == EXIST
            case DIO_enuPORTB:
                 /* If pin configuration is set to anything other than Output then return InvalidOperation */
                if( GET_BIT(DDRB_REG, Copy_enuPinNum) == DIO_enuHigh )
  ec:	87 b3       	in	r24, 0x17	; 23
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_enuSetPinValue+0x76>
  f4:	95 95       	asr	r25
  f6:	87 95       	ror	r24
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_enuSetPinValue+0x72>
  fc:	80 ff       	sbrs	r24, 0
  fe:	76 c0       	rjmp	.+236    	; 0x1ec <DIO_enuSetPinValue+0x16a>
                {
                    switch(Copy_enuState)
 100:	44 23       	and	r20, r20
 102:	19 f0       	breq	.+6      	; 0x10a <DIO_enuSetPinValue+0x88>
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	71 f0       	breq	.+28     	; 0x124 <DIO_enuSetPinValue+0xa2>
 108:	73 c0       	rjmp	.+230    	; 0x1f0 <DIO_enuSetPinValue+0x16e>
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTB_REG, Copy_enuPinNum);
 10a:	28 b3       	in	r18, 0x18	; 24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_enuSetPinValue+0x94>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_enuSetPinValue+0x90>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	88 bb       	out	0x18, r24	; 24
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 120:	80 e0       	ldi	r24, 0x00	; 0
                {
                    switch(Copy_enuState)
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTB_REG, Copy_enuPinNum);
                            break;
 122:	08 95       	ret

                        case DIO_enuHigh:
                            SET_BIT(PORTB_REG, Copy_enuPinNum);
 124:	28 b3       	in	r18, 0x18	; 24
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_enuSetPinValue+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_enuSetPinValue+0xaa>
 134:	82 2b       	or	r24, r18
 136:	88 bb       	out	0x18, r24	; 24
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 138:	80 e0       	ldi	r24, 0x00	; 0
                            CLR_BIT(PORTB_REG, Copy_enuPinNum);
                            break;

                        case DIO_enuHigh:
                            SET_BIT(PORTB_REG, Copy_enuPinNum);
                            break;
 13a:	08 95       	ret
#endif

#if PORT_C_EXIST == EXIST
            case DIO_enuPORTC:
                 /* If pin configuration is set to anything other than Output then return InvalidOperation */
                if( GET_BIT(DDRC_REG, Copy_enuPinNum) == DIO_enuHigh )
 13c:	84 b3       	in	r24, 0x14	; 20
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	06 2e       	mov	r0, r22
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_enuSetPinValue+0xc6>
 144:	95 95       	asr	r25
 146:	87 95       	ror	r24
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_enuSetPinValue+0xc2>
 14c:	80 ff       	sbrs	r24, 0
 14e:	52 c0       	rjmp	.+164    	; 0x1f4 <DIO_enuSetPinValue+0x172>
                {
                    switch(Copy_enuState)
 150:	44 23       	and	r20, r20
 152:	19 f0       	breq	.+6      	; 0x15a <DIO_enuSetPinValue+0xd8>
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	71 f0       	breq	.+28     	; 0x174 <DIO_enuSetPinValue+0xf2>
 158:	4f c0       	rjmp	.+158    	; 0x1f8 <DIO_enuSetPinValue+0x176>
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTC_REG, Copy_enuPinNum);
 15a:	25 b3       	in	r18, 0x15	; 21
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_enuSetPinValue+0xe4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_enuSetPinValue+0xe0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	85 bb       	out	0x15, r24	; 21
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 170:	80 e0       	ldi	r24, 0x00	; 0
                {
                    switch(Copy_enuState)
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTC_REG, Copy_enuPinNum);
                            break;
 172:	08 95       	ret

                        case DIO_enuHigh:
                            SET_BIT(PORTC_REG, Copy_enuPinNum);
 174:	25 b3       	in	r18, 0x15	; 21
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_enuSetPinValue+0xfe>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_enuSetPinValue+0xfa>
 184:	82 2b       	or	r24, r18
 186:	85 bb       	out	0x15, r24	; 21
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 188:	80 e0       	ldi	r24, 0x00	; 0
                            CLR_BIT(PORTC_REG, Copy_enuPinNum);
                            break;

                        case DIO_enuHigh:
                            SET_BIT(PORTC_REG, Copy_enuPinNum);
                            break;
 18a:	08 95       	ret
#endif

#if PORT_D_EXIST == EXIST
            case DIO_enuPORTD:
                 /* If pin configuration is set to anything other than Output then return InvalidOperation */
                if( GET_BIT(DDRD_REG, Copy_enuPinNum) == DIO_enuHigh )
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	06 2e       	mov	r0, r22
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_enuSetPinValue+0x116>
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_enuSetPinValue+0x112>
 19c:	80 ff       	sbrs	r24, 0
 19e:	2e c0       	rjmp	.+92     	; 0x1fc <DIO_enuSetPinValue+0x17a>
                {
                    switch(Copy_enuState)
 1a0:	44 23       	and	r20, r20
 1a2:	19 f0       	breq	.+6      	; 0x1aa <DIO_enuSetPinValue+0x128>
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	71 f0       	breq	.+28     	; 0x1c4 <DIO_enuSetPinValue+0x142>
 1a8:	2b c0       	rjmp	.+86     	; 0x200 <DIO_enuSetPinValue+0x17e>
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTD_REG, Copy_enuPinNum);
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_enuSetPinValue+0x134>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_enuSetPinValue+0x130>
 1ba:	80 95       	com	r24
 1bc:	82 23       	and	r24, r18
 1be:	82 bb       	out	0x12, r24	; 18
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
                {
                    switch(Copy_enuState)
                    {
                        case DIO_enuLow:
                            CLR_BIT(PORTD_REG, Copy_enuPinNum);
                            break;
 1c2:	08 95       	ret

                        case DIO_enuHigh:
                            SET_BIT(PORTD_REG, Copy_enuPinNum);
 1c4:	22 b3       	in	r18, 0x12	; 18
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_enuSetPinValue+0x14e>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_enuSetPinValue+0x14a>
 1d4:	82 2b       	or	r24, r18
 1d6:	82 bb       	out	0x12, r24	; 18
}


DIO_enuErrorStatus_t DIO_enuSetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, DIO_enuState_t Copy_enuState)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
                            CLR_BIT(PORTD_REG, Copy_enuPinNum);
                            break;

                        case DIO_enuHigh:
                            SET_BIT(PORTD_REG, Copy_enuPinNum);
                            break;
 1da:	08 95       	ret
                Ret_enuErrorStatus = DIO_enuInvalidPort;
        }/* End of Port switch */
    }
    else
    {
        Ret_enuErrorStatus = DIO_enuInvalidPin;
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	08 95       	ret
                }/* End of pin configuration check */

                break;/* End of PortD case */
#endif
            default:
                Ret_enuErrorStatus = DIO_enuInvalidPort;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	08 95       	ret
                            break;
                    }/* End of State switch */
                }
                else
                {
                    Ret_enuErrorStatus = DIO_enuInvalidOperation;
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	08 95       	ret
                        case DIO_enuHigh:
                            SET_BIT(PORTA_REG, Copy_enuPinNum);
                            break;

                        default:
                            Ret_enuErrorStatus = DIO_enuInvalidState;
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	08 95       	ret
                            break;
                    }/* End of State switch */
                }
                else
                {
                    Ret_enuErrorStatus = DIO_enuInvalidOperation;
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	08 95       	ret
                        case DIO_enuHigh:
                            SET_BIT(PORTB_REG, Copy_enuPinNum);
                            break;

                        default:
                            Ret_enuErrorStatus = DIO_enuInvalidState;
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	08 95       	ret
                            break;
                    }/* End of State switch */
                }
                else
                {
                    Ret_enuErrorStatus = DIO_enuInvalidOperation;
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	08 95       	ret
                        case DIO_enuHigh:
                            SET_BIT(PORTC_REG, Copy_enuPinNum);
                            break;

                        default:
                            Ret_enuErrorStatus = DIO_enuInvalidState;
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	08 95       	ret
                            break;
                    }/* End of State switch */
                }
                else
                {
                    Ret_enuErrorStatus = DIO_enuInvalidOperation;
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	08 95       	ret
                        case DIO_enuHigh:
                            SET_BIT(PORTD_REG, Copy_enuPinNum);
                            break;

                        default:
                        Ret_enuErrorStatus = DIO_enuInvalidState;
 200:	85 e0       	ldi	r24, 0x05	; 5
    {
        Ret_enuErrorStatus = DIO_enuInvalidPin;
    } /* End of Pin check */

    return Ret_enuErrorStatus;
}
 202:	08 95       	ret

00000204 <DIO_enuGetPinValue>:

DIO_enuErrorStatus_t DIO_enuGetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, u8 * Add_pu8Value)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;

    if( (Copy_enuPinNum >= 0) && (Copy_enuPinNum < DIO_enuMaxPin) )
 204:	68 30       	cpi	r22, 0x08	; 8
 206:	08 f0       	brcs	.+2      	; 0x20a <DIO_enuGetPinValue+0x6>
 208:	65 c0       	rjmp	.+202    	; 0x2d4 <DIO_enuGetPinValue+0xd0>
    {
        if( Add_pu8Value != NULL )
 20a:	41 15       	cp	r20, r1
 20c:	51 05       	cpc	r21, r1
 20e:	09 f4       	brne	.+2      	; 0x212 <DIO_enuGetPinValue+0xe>
 210:	63 c0       	rjmp	.+198    	; 0x2d8 <DIO_enuGetPinValue+0xd4>
        {
            switch(Copy_enuPortNum)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	e9 f0       	breq	.+58     	; 0x250 <DIO_enuGetPinValue+0x4c>
 216:	30 f0       	brcs	.+12     	; 0x224 <DIO_enuGetPinValue+0x20>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	81 f1       	breq	.+96     	; 0x27c <DIO_enuGetPinValue+0x78>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	09 f4       	brne	.+2      	; 0x222 <DIO_enuGetPinValue+0x1e>
 220:	43 c0       	rjmp	.+134    	; 0x2a8 <DIO_enuGetPinValue+0xa4>
 222:	5c c0       	rjmp	.+184    	; 0x2dc <DIO_enuGetPinValue+0xd8>
            {
#if PORT_A_EXIST == EXIST
                case DIO_enuPORTA:
                    /* If configuration is set as output then return InvalidOperation */
                    if( GET_BIT(DDRA_REG, Copy_enuPinNum) == DIO_enuLow )
 224:	8a b3       	in	r24, 0x1a	; 26
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	06 2e       	mov	r0, r22
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_enuGetPinValue+0x2c>
 22c:	95 95       	asr	r25
 22e:	87 95       	ror	r24
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_enuGetPinValue+0x28>
 234:	80 fd       	sbrc	r24, 0
 236:	54 c0       	rjmp	.+168    	; 0x2e0 <DIO_enuGetPinValue+0xdc>
                    {
                        *Add_pu8Value = GET_BIT(PINA_REG, Copy_enuPinNum);
 238:	89 b3       	in	r24, 0x19	; 25
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_enuGetPinValue+0x3e>
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_enuGetPinValue+0x3a>
 246:	81 70       	andi	r24, 0x01	; 1
 248:	fa 01       	movw	r30, r20
 24a:	80 83       	st	Z, r24
}


DIO_enuErrorStatus_t DIO_enuGetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, u8 * Add_pu8Value)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
#endif

#if PORT_B_EXIST == EXIST
                case DIO_enuPORTB:
                    /* If configuration is set as output then return InvalidOperation */
                    if( GET_BIT(DDRB_REG, Copy_enuPinNum) == DIO_enuLow )
 250:	87 b3       	in	r24, 0x17	; 23
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	06 2e       	mov	r0, r22
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_enuGetPinValue+0x58>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_enuGetPinValue+0x54>
 260:	80 fd       	sbrc	r24, 0
 262:	40 c0       	rjmp	.+128    	; 0x2e4 <DIO_enuGetPinValue+0xe0>
                    {
                        *Add_pu8Value = GET_BIT(PINB_REG, Copy_enuPinNum);
 264:	86 b3       	in	r24, 0x16	; 22
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_enuGetPinValue+0x6a>
 26a:	95 95       	asr	r25
 26c:	87 95       	ror	r24
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_enuGetPinValue+0x66>
 272:	81 70       	andi	r24, 0x01	; 1
 274:	fa 01       	movw	r30, r20
 276:	80 83       	st	Z, r24
}


DIO_enuErrorStatus_t DIO_enuGetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, u8 * Add_pu8Value)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
#endif

#if PORT_C_EXIST == EXIST
                case DIO_enuPORTC:
                    /* If configuration is set as output then return InvalidOperation */
                    if( GET_BIT(DDRC_REG, Copy_enuPinNum) == DIO_enuLow )
 27c:	84 b3       	in	r24, 0x14	; 20
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	06 2e       	mov	r0, r22
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_enuGetPinValue+0x84>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_enuGetPinValue+0x80>
 28c:	80 fd       	sbrc	r24, 0
 28e:	2c c0       	rjmp	.+88     	; 0x2e8 <DIO_enuGetPinValue+0xe4>
                    {
                        *Add_pu8Value = GET_BIT(PINC_REG, Copy_enuPinNum);
 290:	83 b3       	in	r24, 0x13	; 19
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuGetPinValue+0x96>
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuGetPinValue+0x92>
 29e:	81 70       	andi	r24, 0x01	; 1
 2a0:	fa 01       	movw	r30, r20
 2a2:	80 83       	st	Z, r24
}


DIO_enuErrorStatus_t DIO_enuGetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, u8 * Add_pu8Value)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
#endif

#if PORT_D_EXIST == EXIST
                case DIO_enuPORTD:
                    /* If configuration is set as output then return InvalidOperation */
                    if( GET_BIT(DDRD_REG, Copy_enuPinNum) == DIO_enuLow )
 2a8:	81 b3       	in	r24, 0x11	; 17
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	06 2e       	mov	r0, r22
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_enuGetPinValue+0xb0>
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_enuGetPinValue+0xac>
 2b8:	80 fd       	sbrc	r24, 0
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <DIO_enuGetPinValue+0xe8>
                    {
                        *Add_pu8Value = GET_BIT(PIND_REG, Copy_enuPinNum);
 2bc:	80 b3       	in	r24, 0x10	; 16
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_enuGetPinValue+0xc2>
 2c2:	95 95       	asr	r25
 2c4:	87 95       	ror	r24
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_enuGetPinValue+0xbe>
 2ca:	81 70       	andi	r24, 0x01	; 1
 2cc:	fa 01       	movw	r30, r20
 2ce:	80 83       	st	Z, r24
}


DIO_enuErrorStatus_t DIO_enuGetPinValue(DIO_enuPort_t Copy_enuPortNum, DIO_enuPin_t Copy_enuPinNum, u8 * Add_pu8Value)
{
    DIO_enuErrorStatus_t Ret_enuErrorStatus = DIO_enuOk;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
            Ret_enuErrorStatus = DIO_enuNullPointer;
        }/* End of Null check */
    }
    else
    {
        Ret_enuErrorStatus = DIO_enuInvalidPin;
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	08 95       	ret
            }/* End of Port switch */

        }
        else
        {
            Ret_enuErrorStatus = DIO_enuNullPointer;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	08 95       	ret
                    }/* End of checking configuration of pin */
                    break;/* End of PortD case */
#endif

                default:
                    Ret_enuErrorStatus = DIO_enuInvalidPort;
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	08 95       	ret
                    {
                        *Add_pu8Value = GET_BIT(PINA_REG, Copy_enuPinNum);
                    }
                    else
                    {
                        Ret_enuErrorStatus = DIO_enuInvalidOperation;
 2e0:	86 e0       	ldi	r24, 0x06	; 6
 2e2:	08 95       	ret
                    {
                        *Add_pu8Value = GET_BIT(PINB_REG, Copy_enuPinNum);
                    }
                    else
                    {
                        Ret_enuErrorStatus = DIO_enuInvalidOperation;
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	08 95       	ret
                    {
                        *Add_pu8Value = GET_BIT(PINC_REG, Copy_enuPinNum);
                    }
                    else
                    {
                        Ret_enuErrorStatus = DIO_enuInvalidOperation;
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	08 95       	ret
                    {
                        *Add_pu8Value = GET_BIT(PIND_REG, Copy_enuPinNum);
                    }
                    else
                    {
                        Ret_enuErrorStatus = DIO_enuInvalidOperation;
 2ec:	86 e0       	ldi	r24, 0x06	; 6
    {
        Ret_enuErrorStatus = DIO_enuInvalidPin;
    } /* End of Pin check */

    return Ret_enuErrorStatus;
}
 2ee:	08 95       	ret

000002f0 <main>:

#define BTN_PORT    DIO_enuPORTA
#define BTN_PIN     DIO_enuPin0

int main (void)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	1f 92       	push	r1
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Number = 254;
	u8 Loc_u8BtnValue = RELEASED;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8BtnState = RELEASED;

	PORT_enuInit();
 2fe:	0e 94 9c 01 	call	0x338	; 0x338 <PORT_enuInit>

int main (void)
{
	u8 Loc_u8Number = 254;
	u8 Loc_u8BtnValue = RELEASED;
	u8 Loc_u8BtnState = RELEASED;
 302:	11 e0       	ldi	r17, 0x01	; 1
 304:	01 c0       	rjmp	.+2      	; 0x308 <main+0x18>
			Loc_u8Number++;
			Loc_u8BtnState = PRESSED;
		}
		else if( (Loc_u8BtnState == PRESSED) && (Loc_u8BtnValue == RELEASED))
		{
			Loc_u8BtnState = RELEASED;
 306:	11 e0       	ldi	r17, 0x01	; 1

	PORT_enuInit();
	//    DIO_enuSetPortValue(DIO_enuPORTC, Loc_u8Number);
	while(1)
	{
		DIO_enuGetPinValue(BTN_PORT, BTN_PIN, &Loc_u8BtnValue);
 308:	ae 01       	movw	r20, r28
 30a:	4f 5f       	subi	r20, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 02 01 	call	0x204	; 0x204 <DIO_enuGetPinValue>

		if( (Loc_u8BtnState == RELEASED) && (Loc_u8BtnValue == PRESSED))
 316:	11 30       	cpi	r17, 0x01	; 1
 318:	49 f4       	brne	.+18     	; 0x32c <main+0x3c>
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	81 11       	cpse	r24, r1
 31e:	06 c0       	rjmp	.+12     	; 0x32c <main+0x3c>
		{
			DIO_enuSetPinValue(DIO_enuPORTA, DIO_enuPin2, DIO_enuHigh);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinValue>
			Loc_u8Number++;
			Loc_u8BtnState = PRESSED;
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	ee cf       	rjmp	.-36     	; 0x308 <main+0x18>
		}
		else if( (Loc_u8BtnState == PRESSED) && (Loc_u8BtnValue == RELEASED))
 32c:	11 11       	cpse	r17, r1
 32e:	ec cf       	rjmp	.-40     	; 0x308 <main+0x18>
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	49 f7       	brne	.-46     	; 0x308 <main+0x18>
 336:	e7 cf       	rjmp	.-50     	; 0x306 <main+0x16>

00000338 <PORT_enuInit>:

/************************************************************************************/
/* Setting the values of Port A registers                                           */
/************************************************************************************/
#if PORT_A_EXIST == EXIST
DDRA_REG = CONCAT(PIN_A0_DDR, PIN_A1_DDR, PIN_A2_DDR, PIN_A3_DDR,
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	8a bb       	out	0x1a, r24	; 26
                  PIN_A4_DDR, PIN_A5_DDR, PIN_A6_DDR, PIN_A7_DDR);

PORTA_REG = CONCAT(PIN_A0_PORT, PIN_A1_PORT, PIN_A2_PORT, PIN_A3_PORT,
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	8b bb       	out	0x1b, r24	; 27

/************************************************************************************/
/* Setting the values of Port B registers                                           */
/************************************************************************************/
#if PORT_B_EXIST == EXIST
DDRB_REG = CONCAT(PIN_B0_DDR, PIN_B1_DDR, PIN_B2_DDR, PIN_B3_DDR,
 340:	17 ba       	out	0x17, r1	; 23
                  PIN_B4_DDR, PIN_B5_DDR, PIN_B6_DDR, PIN_B7_DDR);

PORTB_REG = CONCAT(PIN_B0_PORT, PIN_B1_PORT, PIN_B2_PORT, PIN_B3_PORT,
 342:	18 ba       	out	0x18, r1	; 24

/************************************************************************************/
/* Setting the values of Port C registers                                           */
/************************************************************************************/
#if PORT_C_EXIST == EXIST
DDRC_REG = CONCAT(PIN_C0_DDR, PIN_C1_DDR, PIN_C2_DDR, PIN_C3_DDR,
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	84 bb       	out	0x14, r24	; 20
                  PIN_C4_DDR, PIN_C5_DDR, PIN_C6_DDR, PIN_C7_DDR);

PORTC_REG = CONCAT(PIN_C0_PORT, PIN_C1_PORT, PIN_C2_PORT, PIN_C3_PORT,
 348:	15 ba       	out	0x15, r1	; 21

/************************************************************************************/
/* Setting the values of Port D registers                                           */
/************************************************************************************/
#if PORT_D_EXIST == EXIST
DDRD_REG = CONCAT(PIN_D0_DDR, PIN_D1_DDR, PIN_D2_DDR, PIN_D3_DDR,
 34a:	11 ba       	out	0x11, r1	; 17
                  PIN_D4_DDR, PIN_D5_DDR, PIN_D6_DDR, PIN_D7_DDR);

PORTD_REG = CONCAT(PIN_D0_PORT, PIN_D1_PORT, PIN_D2_PORT, PIN_D3_PORT,
 34c:	12 ba       	out	0x12, r1	; 18



return PORT_enuOK;

}
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>


DIO_project2_4Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c0  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001ef  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a5  00000000  00000000  00000225  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000559  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021e  00000000  00000000  00000f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Readbit.1582 00000010  0000012e  0000012e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    000000ac  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.Readbit.1582:

0000012e <Readbit.1582>:
	SET_BIT(DDRA,2);
	SET_BIT(DDRA,3);
	
	u8 Readbit(u8 Reg , u8 Bp)
	{
		return ((Reg&(1<<Bp))!=0);
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <Readbit.1582+0x8>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <Readbit.1582+0x4>
	}
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
#define PIND             *((volatile u8*) 0x30)
 
 u8 Readbit(u8 reg, u8 Bp);
int main(void)
{
	SET_BIT(DDRA,0);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,1);
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,2);
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,3);
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	88 60       	ori	r24, 0x08	; 8
  82:	8a bb       	out	0x1a, r24	; 26
	u8 Readbit(u8 Reg , u8 Bp)
	{
		return ((Reg&(1<<Bp))!=0);
	}
	
	u8 counter = 0;
  84:	c0 e0       	ldi	r28, 0x00	; 0
	
	
    while(1)
    {
        while(!Readbit(PINA,5));  /*tool mana mash da5ed stuck mat3mlsh 7aga*/
  86:	89 b3       	in	r24, 0x19	; 25
  88:	65 e0       	ldi	r22, 0x05	; 5
  8a:	0e 94 97 00 	call	0x12e	; 0x12e <Readbit.1582>
  8e:	88 23       	and	r24, r24
  90:	d1 f3       	breq	.-12     	; 0x86 <main+0x1a>
        counter++;
  92:	cf 5f       	subi	r28, 0xFF	; 255
		while(Readbit(PINA,5));   /*mat3mlsh 7aga la7ad mashel edey*/
  94:	89 b3       	in	r24, 0x19	; 25
  96:	65 e0       	ldi	r22, 0x05	; 5
  98:	0e 94 97 00 	call	0x12e	; 0x12e <Readbit.1582>
  9c:	81 11       	cpse	r24, r1
  9e:	fa cf       	rjmp	.-12     	; 0x94 <main+0x28>
	if(counter==1)
  a0:	c1 30       	cpi	r28, 0x01	; 1
  a2:	69 f4       	brne	.+26     	; 0xbe <main+0x52>
    {		
	SET_BIT(PORTA,0);
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,1);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,2);
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,3);
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	e4 cf       	rjmp	.-56     	; 0x86 <main+0x1a>
	}
	else if(counter==2) 
  be:	c2 30       	cpi	r28, 0x02	; 2
  c0:	69 f4       	brne	.+26     	; 0xdc <main+0x70>
	{
	SET_BIT(PORTA,1);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,0);
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,2);
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTA,3);	
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	d5 cf       	rjmp	.-86     	; 0x86 <main+0x1a>
	}
	else if (counter==3) 
  dc:	c3 30       	cpi	r28, 0x03	; 3
  de:	69 f4       	brne	.+26     	; 0xfa <main+0x8e>
	{
		SET_BIT(PORTA,0);
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTA,2);
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	8b bb       	out	0x1b, r24	; 27
		SET_BIT(PORTA,1);
  ec:	8b b3       	in	r24, 0x1b	; 27
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTA,3);
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	87 7f       	andi	r24, 0xF7	; 247
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	c6 cf       	rjmp	.-116    	; 0x86 <main+0x1a>
	}
	else if(counter==4)
  fa:	c4 30       	cpi	r28, 0x04	; 4
  fc:	21 f6       	brne	.-120    	; 0x86 <main+0x1a>
	{
		SET_BIT(PORTA,2);
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	84 60       	ori	r24, 0x04	; 4
 102:	8b bb       	out	0x1b, r24	; 27
		SET_BIT(PORTA,0);
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	81 60       	ori	r24, 0x01	; 1
 108:	8b bb       	out	0x1b, r24	; 27
	    CLR_BIT(PORTA,1);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTA,3);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	87 7f       	andi	r24, 0xF7	; 247
 114:	8b bb       	out	0x1b, r24	; 27
 116:	b7 cf       	rjmp	.-146    	; 0x86 <main+0x1a>

Disassembly of section .text.__dummy_fini:

00000146 <_fini>:
 146:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000148 <__funcs_on_exit>:
 148:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000014a <__simulator_exit>:
 14a:	08 95       	ret

Disassembly of section .text.exit:

00000118 <exit>:
 118:	ec 01       	movw	r28, r24
 11a:	0e 94 a4 00 	call	0x148	; 0x148 <__funcs_on_exit>
 11e:	0e 94 a3 00 	call	0x146	; 0x146 <_fini>
 122:	ce 01       	movw	r24, r28
 124:	0e 94 a5 00 	call	0x14a	; 0x14a <__simulator_exit>
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 a1 00 	call	0x142	; 0x142 <_Exit>

Disassembly of section .text._Exit:

00000142 <_Exit>:
 142:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
